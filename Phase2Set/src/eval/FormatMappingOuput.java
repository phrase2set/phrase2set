package eval;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.LinkedHashSet;

import config.Config;
import utils.FileUtils;

public class FormatMappingOuput {
	
	public final static int synthesisDataSize = 4874;
	
	public static void main(String[] args) throws Exception {
		FormatMappingOuput processor = new FormatMappingOuput();
		processor.format();
	}
	
	@SuppressWarnings("unchecked")
	public void format() throws Exception {
		/* Original testing data*/
		HashMap<Integer, Long> mapLineToID = (HashMap<Integer, Long>)
				FileUtils.readObjectFile(Config.stackOverflowTest + "mapLineToAnswerID.dat");
		
		/* Data for mappings generated by inferring model */
		HashMap<Integer, LinkedHashSet<String>> mappedCodeElements = getMappedCodeElements();
		
		HashMap<Long, Double> soTestIDs = (HashMap<Long, Double>) FileUtils.readObjectFile(
				Config.stackOverflowTest + "SatisfiedPostIds_251.dat");		
		
		/* Detect type of code using regex */
		String pqnRegex = "([A-Z][a-z0-9]+){1,}";
		String methodRegex = "([a-z]+[A-Z]*[a-z0-9]+){1,}";
		
		/* Process and prepare for output */
		FileWriter fwInferer = new FileWriter(Config.alignOutputDirPath + "InferredBagsOfCode_251.txt");
		int count  = 0;
		for(Integer codeLine : mappedCodeElements.keySet()){
			count ++;
			Long postID = mapLineToID.get(codeLine);
//			if(filteredSamples.containsKey(postID))
//				continue;
			if(!soTestIDs.containsKey(postID))
				continue;
			LinkedHashSet<String> generatedCodeElements = mappedCodeElements.get(codeLine);
			
			StringBuilder preOutput = new StringBuilder();
			preOutput.append(postID + ":::");
			for(String code : generatedCodeElements) {
				/* Retrieve type of code elements by heuristics */
				String[] codeParts = code.split("\\.");
				String name = "";
				if(codeParts.length == 1)
					name = codeParts[0];
				else if(codeParts.length == 2)
					name = codeParts[1];
				if(name.isEmpty())
					continue;
				if(name.matches(pqnRegex))
					preOutput.append(code + "//" + "type");
				else if(name.matches(methodRegex))
					preOutput.append(code + "//" + "method");
				else
					preOutput.append(code + "//" + "field");
				preOutput.append(":::");
			}
			fwInferer.append(preOutput.toString() + System.lineSeparator());
		}
		
		fwInferer.close();
		System.out.println(count);
	}
	
	public static String processToOuput() {
		return "";
	}
	
	private HashMap<Integer, LinkedHashSet<String>> getMappedCodeElements() throws Exception {
		HashMap<Integer, LinkedHashSet<String>> mappedCodeElements = new HashMap<Integer, LinkedHashSet<String>>();
		
		FileInputStream inStream = new FileInputStream(Config.alignEvalDirPath + "output.txt");
		InputStreamReader inStrReader = new InputStreamReader(inStream);
		BufferedReader bufReader = new BufferedReader(inStrReader);
		
		String curLine;
		int lineCount = 0;
		while ((curLine = bufReader.readLine()) != null) {
			/* For debugging */
			lineCount ++;
			LinkedHashSet<String> alignedElements = new LinkedHashSet<String>();
			String[] alignments = curLine.trim().split("\\s");
			for(String alignment : alignments) {
				if(alignment.split("\\.").length != 2)
					continue;
				alignedElements.add(alignment);
			}
			mappedCodeElements.put(lineCount, alignedElements);
		}
		bufReader.close();
		
		return mappedCodeElements;
	}

}
